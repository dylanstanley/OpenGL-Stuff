#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D textureSampler;
uniform vec3 LightPosition_worldspace;

void main(){

	vec3 n = normalize(Normal_cameraspace);
	vec3 l = normalize(LightDirection_cameraspace);

	vec3 LightColor = vec3(1,1,1);
	float LightPower = 4500.0f;

	float distance = length( LightPosition_worldspace - Position_worldspace );

	vec3 MaterialDiffuseColor = texture(textureSampler, UV).rgb;
	vec3 MaterialAmbientColor = vec3(0.4,0.4,0.4) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = LightColor;

	//Cosine of the angle between the normal and the light direction, clamped above 0
	float cosTheta = clamp(dot(n, l), 0, 1);

	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

    // Output color = color of the texture at the specified UV
    color = 
	//Ambient
	MaterialAmbientColor +
	//Diffuse
	MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance) +
	//Specular
	MaterialSpecularColor * LightColor * LightPower/10 * pow(cosAlpha,5) / (distance*distance);
}